import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
from scipy.stats import wilcoxon
from numpy.numarray.functions import average

def plot_simple_graph(title, x_lable, y_lable, grid,plt_func, *args):
	plt.figure()
	plt_func(*args)
	plt.xlabel(x_lable)
	plt.ylabel(y_lable)
	plt.title(title)
	#plt.axis([0, 100, 0, 1.5])
	plt.grid(grid)

def get_xys_info(list):
	xs = []
	ys = []
	rank = 0
	for x, y in list:
		xs.append(x)
		ys.append(y)
		rank += y
	return xs, ys, rank

runtime_of_dirts_dict = {'AStar': [(3, 0.30898678310088751), (4, 0.032651273725978869), (5, 0.16655920761222767), (6, 0.18713016574631011), (7, 0.96994289568117809), (8, 0.12948985007229252), (9, 0.061118099970168295), (10, 0.50615873315680704), (11, 0.17314603968723155), (12, 0.10322095727009876), (13, 0.23274586514659198), (14, 0.13986470380301239), (15, 0.15579468802229332), (16, 0.25205203637560025), (17, 0.17913750545223112), (18, 0.19697430592018211), (19, 0.11119606576624774), (20, 0.19293303167467285), (21, 0.13601786175912134), (22, 0.11678899075291647), (23, 0.20730014464717908), (24, 0.31801652587152535), (25, 0.22025171184275222), (26, 0.11397230785181242), (27, 0.18822085737494271), (28, 0.22876502571091148), (29, 0.13944351644108635), (30, 0.14903994291205624), (31, 0.27135860257742517), (32, 0.21119664301232888), (33, 0.30160473753657741), (34, 0.099295333403598071), (35, 0.1966095076003577), (36, 0.15751994391119853), (37, 0.19085249094297757), (38, 0.080064554852541686), (39, 0.090413200219551557), (40, 0.15928290713269178), (41, 0.18306271111557024), (42, 0.20142836441463141), (43, 0.18860987576812116), (44, 0.069323454957834041), (45, 0.12504418721109181), (46, 0.16412541992011762), (47, 0.17383157129597748), (48, 0.083508535988859947), (49, 0.28520505027563559), (50, 0.1262589621210691), (51, 0.19503830960527868), (52, 0.12450037817222455), (53, 0.17125143471264651), (54, 0.073560816370971865), (55, 0.11353927627584116), (56, 0.07019115293297773), (57, 0.1579092521301271), (58, 0.13144612959534102), (59, 0.14263758662191631), (60, 0.12910269550969436), (61, 0.16434630291515442), (62, 0.1392492155725244), (63, 0.20430211466165771), (64, 0.17424980329398565), (65, 0.18021603174648729), (66, 0.13024801529856536), (67, 0.19393841426948941), (68, 0.10299330231908457), (69, 0.1302620974264149), (70, 0.13037298510607148), (71, 0.1257059055481887), (72, 0.094908271153586715), (73, 0.11601985778584904), (74, 0.21681756697455204), (75, 0.080404488130661769), (76, 0.11110746127855309), (77, 0.14254068948760021), (78, 0.11276653390269203), (79, 0.16971364267755798), (80, 0.14691365311683741), (81, 0.1237694844584282), (82, 0.118968979443014), (83, 0.11036746116341342), (84, 0.11159607039148579), (85, 0.1567277200793957), (86, 0.088443320062593603), (87, 0.16057368123167451), (88, 0.092245013223150221), (89, 0.1176475581727256), (90, 0.10051773445084614), (91, 0.09571964000736613), (92, 0.13427883175495481), (93, 0.10806669637049121), (94, 0.1128805973769286), (95, 0.11622754183516391), (96, 0.078607951439664703), (97, 0.13907494230758305), (98, 0.12326852121060367), (99, 0.10447524374310226)], 'DirtsDivisionHeuristic': [(3, 0.27488816542364208), (4, 0.072864758135006258), (5, 0.22529816423117327), (6, 0.26753369579592307), (7, 0.3851761496770913), (8, 0.10836871817481475), (9, 0.092861321019255011), (10, 0.36169532098880097), (11, 0.52422056101959857), (12, 0.1540362500228826), (13, 0.22601693821486671), (14, 0.14723501109699758), (15, 0.099786536121280273), (16, 0.16449617469033839), (17, 0.088530613542522646), (18, 0.13593516209334192), (19, 0.18457208935406075), (20, 0.20337661977715271), (21, 0.11764186730093636), (22, 0.42335004795926712), (23, 0.25065649565448089), (24, 0.17803119734296757), (25, 0.29496604030407297), (26, 0.31259079972933207), (27, 0.22123518964007274), (28, 0.35831209485178306), (29, 0.19851669939687561), (30, 0.12913982970451532), (31, 0.24906800265549581), (32, 0.23207323969288751), (33, 0.22920068651483855), (34, 0.15980874870700745), (35, 0.16650766187433094), (36, 0.28723476481477267), (37, 0.17173895441332562), (38, 0.078678475411753587), (39, 0.55199948684758171), (40, 0.34318869816802933), (41, 0.32501559583604878), (42, 0.1281719845419475), (43, 0.18634079927139366), (44, 0.16174810254459648), (45, 0.18928573404206064), (46, 0.28958332110626683), (47, 0.29785117673555817), (48, 0.16060053803093885), (49, 0.15892848802419321), (50, 0.078184648564752018), (51, 0.30540541174293012), (52, 0.25953884506040698), (53, 0.11050309549110129), (54, 0.12872506995655317), (55, 0.15047570823613898), (56, 0.14347900039102715), (57, 0.10946915169478288), (58, 0.11440275271787288), (59, 0.1899753271802522), (60, 0.18350399151961483), (61, 0.16480260584133055), (62, 0.12920059003443296), (63, 0.11778649191594359), (64, 0.15478013419379266), (65, 0.13920537521368645), (66, 0.18318727341130453), (67, 0.12761193685125377), (68, 0.12039248937322314), (69, 0.16531806717473269), (70, 0.13328974797800583), (71, 0.17957155690340532), (72, 0.15995676317109225), (73, 0.24224927609043645), (74, 0.29210570950227227), (75, 0.1542873870170115), (76, 0.13955135225711202), (77, 0.099434774621179459), (78, 0.15283075902352605), (79, 0.15340868636426824), (80, 0.089189791920193787), (81, 0.10763984154429614), (82, 0.13276001362961634), (83, 0.16408125260258236), (84, 0.1724758823260388), (85, 0.38617907506916122), (86, 0.30100739834718954), (87, 0.39184613326955742), (88, 0.1334111564213975), (89, 0.18305435749129317), (90, 0.10459641092575112), (91, 0.13627329864955975), (92, 0.15832250601331649), (93, 0.10382432343376716), (94, 0.099690207478749682), (95, 0.10325015037775589), (96, 0.17288984681310637), (97, 0.14633688268319939), (98, 0.12647369510801693), (99, 0.16936698543235931)], 'OneDirtPerRobotHeuristic': [(3, 0.30898678310088751), (4, 0.032651273725978869), (5, 0.16655920761222767), (6, 0.18713016574631011), (7, 0.96994289568117809), (8, 0.12948985007229252), (9, 0.061118099970168295), (10, 0.50615873315680704), (11, 0.17314603968723155), (12, 0.10322095727009876), (13, 0.23274586514659198), (14, 0.13986470380301239), (15, 0.15579468802229332), (16, 0.25205203637560025), (17, 0.17913750545223112), (18, 0.19697430592018211), (19, 0.11119606576624774), (20, 0.19293303167467285), (21, 0.13601786175912134), (22, 0.11678899075291647), (23, 0.20730014464717908), (24, 0.31801652587152535), (25, 0.22025171184275222), (26, 0.11397230785181242), (27, 0.18822085737494271), (28, 0.22876502571091148), (29, 0.13944351644108635), (30, 0.14903994291205624), (31, 0.27135860257742517), (32, 0.21119664301232888), (33, 0.30160473753657741), (34, 0.099295333403598071), (35, 0.1966095076003577), (36, 0.15751994391119853), (37, 0.19085249094297757), (38, 0.080064554852541686), (39, 0.090413200219551557), (40, 0.15928290713269178), (41, 0.18306271111557024), (42, 0.20142836441463141), (43, 0.18860987576812116), (44, 0.069323454957834041), (45, 0.12504418721109181), (46, 0.16412541992011762), (47, 0.17383157129597748), (48, 0.083508535988859947), (49, 0.28520505027563559), (50, 0.1262589621210691), (51, 0.19503830960527868), (52, 0.12450037817222455), (53, 0.17125143471264651), (54, 0.073560816370971865), (55, 0.11353927627584116), (56, 0.07019115293297773), (57, 0.1579092521301271), (58, 0.13144612959534102), (59, 0.14263758662191631), (60, 0.12910269550969436), (61, 0.16434630291515442), (62, 0.1392492155725244), (63, 0.20430211466165771), (64, 0.17424980329398565), (65, 0.18021603174648729), (66, 0.13024801529856536), (67, 0.19393841426948941), (68, 0.10299330231908457), (69, 0.1302620974264149), (70, 0.13037298510607148), (71, 0.1257059055481887), (72, 0.094908271153586715), (73, 0.11601985778584904), (74, 0.21681756697455204), (75, 0.080404488130661769), (76, 0.11110746127855309), (77, 0.14254068948760021), (78, 0.11276653390269203), (79, 0.16971364267755798), (80, 0.14691365311683741), (81, 0.1237694844584282), (82, 0.118968979443014), (83, 0.11036746116341342), (84, 0.11159607039148579), (85, 0.1567277200793957), (86, 0.088443320062593603), (87, 0.16057368123167451), (88, 0.092245013223150221), (89, 0.1176475581727256), (90, 0.10051773445084614), (91, 0.09571964000736613), (92, 0.13427883175495481), (93, 0.10806669637049121), (94, 0.1128805973769286), (95, 0.11622754183516391), (96, 0.078607951439664703), (97, 0.13907494230758305), (98, 0.12326852121060367), (99, 0.10447524374310226)], 'BeamSearch': [(3, 0.62975779197904813), (4, 0.07846247495943981), (5, 0.54808141704292712), (6, 0.51846838084474367), (7, 0.92727996220663556), (8, 0.43465607114572968), (9, 0.16943429477336577), (10, 1.9251804229140823), (11, 0.47222746237599461), (12, 0.32828369019285947), (13, 0.42749672334308286), (14, 0.52213885776551194), (15, 0.26770485013131712), (16, 1.0541117972796306), (17, 0.65413353751731051), (18, 0.54518689452343161), (19, 0.31832177913705245), (20, 0.50067503653111634), (21, 0.74735576352594801), (22, 0.41654667712530302), (23, 0.67624186104386852), (24, 0.48133123479366918), (25, 0.468580118757568), (26, 0.29846089412571403), (27, 0.76541959682162575), (28, 0.58990978982610287), (29, 0.44230717054107499), (30, 0.47655274569774708), (31, 0.8420897277447682), (32, 0.53584056085722231), (33, 0.64492675011583878), (34, 0.82727228318130386), (35, 0.4510801691668056), (36, 0.60430445853850123), (37, 0.52852788271778428), (38, 0.193220414117383), (39, 0.25582022061895515), (40, 3.7106846524141845), (41, 0.60365643035101313), (42, 0.41450106744159548), (43, 0.40695662567770796), (44, 0.25226714092922398), (45, 0.51105071778804612), (46, 0.46103951153755274), (47, 0.37917514529260887), (48, 0.24078667136468823), (49, 0.67179639808522995), (50, 0.41678029336783767), (51, 1.1062679040766461), (52, 0.54590159381124814), (53, 0.38855606924474007), (54, 0.23252942539678584), (55, 0.28252169481986378), (56, 0.32347546147916467), (57, 0.41624564002213366), (58, 0.40625634769251773), (59, 0.41955060008046408), (60, 0.64956343155203811), (61, 0.42487951422665782), (62, 0.29460973945565311), (63, 0.24348583710583524), (64, 0.38880310356667991), (65, 0.40098014849492686), (66, 1.1227646402210454), (67, 0.30805073894055962), (68, 0.26946963088891396), (69, 0.26888040218516279), (70, 0.40186334542983915), (71, 0.43045426436873013), (72, 0.23340272149764335), (73, 0.39758654416044459), (74, 0.31265459200639073), (75, 0.23087198548781088), (76, 0.2234187414861708), (77, 0.81728604351053635), (78, 0.58257636047410299), (79, 0.41859445989245347), (80, 0.41859474275267416), (81, 0.28131329010042982), (82, 0.41796292924883766), (83, 0.50208156608554066), (84, 0.43848465893500232), (85, 0.54070483506569444), (86, 0.22856911857073017), (87, 0.60675441945707342), (88, 0.38089724352151033), (89, 0.26920338846276648), (90, 0.2751284498687811), (91, 0.32790402378754113), (92, 0.36727467657679763), (93, 0.29368967259329942), (94, 0.16971377026626466), (95, 0.38069299028556997), (96, 0.30879965789663305), (97, 0.36828976866327234), (98, 0.31797966558872537), (99, 0.34119194645160922)]}
def process_runtime_of_dirt(key1, key2):
	print '### comparing runtime between', key1, 'and', key2, '###'
	k1_x, k1_y, k1_rank = get_xys_info(runtime_of_dirts_dict[key1])
	k2_x, k2_y, k2_rank = get_xys_info(runtime_of_dirts_dict[key2])
	plot_simple_graph(key1, 'Dirt Piles Num', 'Runtime / Dirt Piles Num', True, plt.plot, k1_x, k1_y)
	plot_simple_graph(key2, 'Dirt Piles Num', 'Runtime / Dirt Piles Num', True, plt.plot, k2_x, k2_y)
	print 'wilcoxon:', wilcoxon(k1_y, k2_y)
	print key1, 'rank:', k1_rank
	print key2, 'rank:', k2_rank

def get_dict_info(list):
	d = { 1:[], 2:[], 3:[] }
	for x, y in list:
		d[x] = y
	for x in d:
		d[x] = average(d[x])
	return [d[1], d[2], d[3]], 3*d[1]+2*d[2]+1*d[3]
	
len_of_robots_test = {'DirtsDivisionHeuristic': [(1, 92), (1, 114), (1, 100), (1, 111), (1, 109), (1, 117), (1, 102), (1, 102), (1, 104), (1, 112), (1, 104), (1, 108), (1, 115), (1, 106), (1, 109), (1, 115), (1, 106), (1, 107), (1, 106), (2, 49), (2, 61), (2, 62), (2, 63), (2, 57), (2, 50), (2, 51), (2, 56), (2, 79), (2, 48), (2, 51), (2, 66), (2, 63), (2, 59), (2, 56), (2, 67), (2, 65), (2, 52), (2, 68), (3, 36), (3, 41), (3, 57), (3, 40), (3, 36), (3, 41), (3, 35), (3, 48), (3, 41), (3, 38), (3, 49), (3, 53), (3, 45), (3, 44), (3, 45), (3, 38), (3, 46), (3, 39), (3, 45)], 'OneDirtPerRobotHeuristic': [(1, 110), (1, 116), (1, 106), (1, 105), (1, 111), (1, 107), (1, 100), (1, 100), (1, 108), (1, 93), (1, 107), (1, 107), (1, 102), (1, 108), (1, 105), (1, 96), (1, 110), (1, 103), (1, 114), (2, 50), (2, 53), (2, 56), (2, 49), (2, 48), (2, 50), (2, 67), (2, 50), (2, 46), (2, 48), (2, 58), (2, 51), (2, 65), (2, 58), (2, 56), (2, 51), (2, 47), (2, 61), (2, 53), (3, 44), (3, 31), (3, 34), (3, 40), (3, 39), (3, 29), (3, 39), (3, 36), (3, 34), (3, 36), (3, 37), (3, 35), (3, 29), (3, 34), (3, 47), (3, 36), (3, 32), (3, 34), (3, 38)], 'AStarAnyTime': [(1, 110), (1, 116), (1, 106), (1, 105), (1, 111), (1, 107), (1, 100), (1, 100), (1, 108), (1, 93), (1, 107), (1, 107), (1, 102), (1, 108), (1, 105), (1, 96), (1, 110), (1, 103), (1, 114), (2, 50), (2, 53), (2, 56), (2, 49), (2, 48), (2, 50), (2, 67), (2, 50), (2, 46), (2, 48), (2, 58), (2, 51), (2, 65), (2, 58), (2, 56), (2, 51), (2, 47), (2, 61), (2, 53), (3, 44), (3, 31), (3, 34), (3, 40), (3, 39), (3, 29), (3, 39), (3, 36), (3, 34), (3, 36), (3, 37), (3, 35), (3, 29), (3, 34), (3, 47), (3, 36), (3, 32), (3, 34), (3, 38)], 'BeamSearchAnyTime': [(1, 114), (1, 104), (1, 102), (1, 117), (1, 115), (1, 107), (1, 100), (1, 110), (1, 114), (1, 105), (1, 112), (1, 117), (1, 115), (1, 123), (1, 109), (1, 94), (1, 116), (1, 107), (1, 105), (2, 48), (2, 55), (2, 52), (2, 48), (2, 49), (2, 49), (2, 48), (2, 48), (2, 50), (2, 48), (2, 59), (2, 49), (2, 65), (2, 63), (2, 56), (2, 65), (2, 47), (2, 55), (2, 54), (3, 40), (3, 31), (3, 34), (3, 40), (3, 39), (3, 29), (3, 39), (3, 35), (3, 36), (3, 42), (3, 37), (3, 34), (3, 30), (3, 35), (3, 40), (3, 36), (3, 44), (3, 41), (3, 39)]}
def process_len_of_robots(key1, key2):
	print '### comparing solution quality between', key1, 'and', key2, '###'
	k1_avgs, k1_rank = get_dict_info(len_of_robots_test[key1])
	k2_avgs, k2_rank = get_dict_info(len_of_robots_test[key2])
	width = 0.5
	plot_simple_graph(key1, 'Robots Num', 'Average Solution Quality (Length)', False, plt.bar, [x-width/2 for x in [1, 2, 3]], k1_avgs, width)
	plot_simple_graph(key2, 'Robots Num', 'Average Solution Quality (Length)', False, plt.bar, [x-width/2 for x in [1, 2, 3]], k2_avgs, width)
	print 'wilcoxon:', wilcoxon(k1_avgs, k2_avgs)
	print key1, 'rank:', k1_rank
	print key2, 'rank:', k2_rank

agent_test = [(10, 78.0), (25, 58.0), (40, 74.0), (55, 77.0), (70, 67.0), (85, 53.0), (100, 56.0), (115, 66.0), (130, 71.0), (145, 64.0), (160, 62.0), (175, 56.0), (190, 55.0), (205, 53.0), (220, 57.0), (235, 73.0), (250, 60.0), (265, 63.0), (280, 62.0), (295, 49.0)]
def process_len_of_limit():
	print '### processing solution quality ###'
	xs, ys, rank = get_xys_info(agent_test)
	plot_simple_graph('RobotsAgent', 'Time Limit', 'Solution Quality (Length)', True, plt.plot, xs, ys)
	
if __name__ == '__main__':
	#process_runtime_of_dirt('DirtsDivisionHeuristic', 'OneDirtPerRobotHeuristic')
	#process_runtime_of_dirt('AStar', 'BeamSearch')
	#process_len_of_robots('DirtsDivisionHeuristic', 'OneDirtPerRobotHeuristic')
	#process_len_of_robots('AStarAnyTime', 'BeamSearchAnyTime')
	process_len_of_limit()
	plt.show()